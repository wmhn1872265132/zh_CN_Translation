name: Install dependencies

description: 'Install dependencies'
inputs:
  ref:
    description: >
      The branch, tag or SHA to checkout. When checking out the repository that
      triggered a workflow, this defaults to the reference or SHA for that
      event.  Otherwise, uses the default branch.
    default: ${{ (github.ref_name == 'Uploads' || github.base_ref == 'Uploads' || github.ref_name == 'main' || github.base_ref == 'main') && 'beta' || 'master' }}
  submodules:
    description: >
      Whether to checkout submodules: `true` to checkout submodules or `recursive` to
      recursively checkout submodules.
    default: false
  Download-gettext:
    description: >
      Whether to Download gettext.
    default: false
runs:
  using: "composite"

  steps:
    - name: Checkout NVDA repository
      uses: actions/checkout@v5
      with:
        repository: nvaccess/nvda.git
        ref: ${{ inputs.ref }}
        submodules: ${{ inputs.submodules }}
        path: ${{ github.workspace }}/Tools/NVDA
    - name: Cache gettext
      id: cache-gettext
      if: ${{ inputs.Download-gettext == 'true' }}
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/PotXliff/Temp/gettext.zip
        key: gettext.zip
    - name: Download gettext
      if: ${{ inputs.Download-gettext == 'true' && steps.cache-gettext.outputs.cache-hit != 'true' }}
      uses: carlosperate/download-file-action@v2
      with:
        file-url: https://github.com/mlocati/gettext-iconv-windows/releases/download/v0.24-v1.17/gettext0.24-iconv1.17-static-32.zip
        file-name: gettext.zip
        location: ${{ github.workspace }}/PotXliff/Temp
        sha256: c14d844f4950e14189fe47795700172f019ec2f5430bfa068a7a909ff784f45c
    - name: Read Python version
      id: python-version
      shell: pwsh
      run: |
        $lines = Get-Content "${{ github.workspace }}/Tools/NVDA/.python-versions" | Where-Object {
          $_.Trim() -ne "" -and $_.Trim() -notmatch "^\s*#"
        }
        $firstLine = $lines[0]
        Write-Host "Using Python version line: $firstLine"
        if ($firstLine -match 'cpython-([\d\.]+)-windows-(x86|x86_64)') {
          $version = $matches[1]
          $arch = $matches[2]
          if ($arch -eq "x86_64") {
            $architecture = "x64"
          } else {
            $architecture = $arch
          }
          Write-Host "Parsed Python version: $version"
          Write-Host "Parsed architecture: $architecture"
          "python_version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "python_architecture=$architecture" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        } else {
          Write-Error "Error: Could not parse Python version and architecture from: $firstLine"
          exit 1
        }
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ steps.python-version.outputs.python_version }}
        architecture: ${{ steps.python-version.outputs.python_architecture }}
    - name: Install uv
      uses: astral-sh/setup-uv@v5
    - name: Create Python virtual environment
      shell: cmd
      run: |
        if not "${{ inputs.submodules }}"=="true" (
          cd /d "${{ github.workspace }}\Tools\NVDA"
          git submodule update --init miscDeps
        )
        uv sync --directory "${{ github.workspace }}\Tools\NVDA"
